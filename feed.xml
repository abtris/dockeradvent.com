<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Advent</title>
    <description>Made by &lt;a href=&quot;https://twitter.com/abtris&quot; target=&quot;_blank&quot;&gt;@abtris&lt;/a&gt;.</description>
    <link>http://www.dockeradvent.com//</link>
    <atom:link href="http://www.dockeradvent.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Dec 2015 09:03:14 +0100</pubDate>
    <lastBuildDate>Wed, 16 Dec 2015 09:03:14 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Day Sixteen - Using docker for CLI Tools</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
I like one thing at docker and that is isolation. For example we have &lt;a href=&quot;https://github.com/apiaryio/polls-api&quot;&gt;project Polls API&lt;/a&gt; written in Python. For testing API we use tool named &lt;a href=&quot;http://dredd.readthedocs.org/en/latest/&quot;&gt;Dredd&lt;/a&gt; written in NodeJS. I can&amp;#39;t install NodeJS to our system. But you can easy use Docker to solve this problem.&lt;/p&gt;

&lt;p&gt;Here is &lt;code&gt;circle.yml&lt;/code&gt; file for project:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;echo &amp;#39;DOCKER_OPTS=&amp;quot;-s btrfs -e lxc -D --userland-proxy=false&amp;quot;&amp;#39; | sudo tee -a /etc/default/docker&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sudo curl -L -o /usr/bin/docker &amp;#39;https://s3-external-1.amazonaws.com/circle-downloads/docker-1.8.3-circleci&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sudo chmod 0755 /usr/bin/docker&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cache_directories&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/bin/docker-compose/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker info&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker version&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;if [[ ! -e ~/bin/docker-compose ]]; then mkdir ~/bin/docker-compose/ &amp;amp;&amp;amp; curl -L https://github.com/docker/compose/releases/download/1.4.2/docker-compose-`uname -s`-`uname -m` &amp;gt; ~/bin/docker-compose/docker-compose &amp;amp;&amp;amp; chmod +x ~/bin/docker-compose/docker-compose; fi&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose --version&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose pull&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker pull apiaryio/dredd&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose build&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose up -d web&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose run shell python manage.py migrate&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;~/bin/docker-compose/docker-compose run shell python manage.py test&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;./scripts/dredd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you can create image for some tools you can make it as I did for Dredd.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; node:0.12

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; npm install -g dredd

&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; dredd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s easy and depends on your tool. Sometimes is better use &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt;. Dredd works out of box without parameters using &lt;code&gt;dredd.yml&lt;/code&gt; config. For example API Blueprint parser &lt;a href=&quot;https://github.com/apiaryio/drafter&quot;&gt;drafter&lt;/a&gt; waiting for input from stdin. There is better using &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; with &lt;code&gt;-h&lt;/code&gt; as default parameter.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; apiaryio/base-dev-cpp:1.0.0
&lt;span class=&quot;k&quot;&gt;MAINTAINER&lt;/span&gt; Apiary &lt;span class=&quot;s2&quot;&gt;&amp;quot;sre@apiary.io&amp;quot;&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; locale-gen en_US.UTF-8
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;LC_ALL=en_US.UTF-8&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/default/locale
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; dpkg-reconfigure locales

&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; ./ /drafter

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt; /drafter

&lt;span class=&quot;c&quot;&gt;# It&amp;#39;s tempting to put ./configure into RUN, but then you have timestamp issues&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; ./configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make all &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt; /usr/local/bin/drafter
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;-h&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/16/day-sixteen-using-docker-for-cli-tools/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/16/day-sixteen-using-docker-for-cli-tools/</guid>
        
        
      </item>
    
      <item>
        <title>Day Fifteen - Container Lifecycle</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
 I can write some details about docker containers lifecycle.&lt;/p&gt;

&lt;h2&gt;Container statuses&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;running&lt;/li&gt;
&lt;li&gt;stopped&lt;/li&gt;
&lt;li&gt;paused&lt;/li&gt;
&lt;li&gt;killed&lt;/li&gt;
&lt;li&gt;removed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;How change status&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;image -&amp;gt; &lt;code&gt;docker run&lt;/code&gt; -&amp;gt; running&lt;/li&gt;
&lt;li&gt;running -&amp;gt; &lt;code&gt;docker pause&lt;/code&gt; -&amp;gt; paused -&amp;gt; &lt;code&gt;docker unpause&lt;/code&gt; -&amp;gt; running&lt;/li&gt;
&lt;li&gt;running -&amp;gt; &lt;code&gt;docker stop&lt;/code&gt; -&amp;gt; stopped -&amp;gt; &lt;code&gt;docker start&lt;/code&gt; -&amp;gt; running&lt;/li&gt;
&lt;li&gt;stopped -&amp;gt; &lt;code&gt;docker rm&lt;/code&gt; -&amp;gt; removed&lt;/li&gt;
&lt;li&gt;running -&amp;gt; &lt;code&gt;docker kill&lt;/code&gt; -&amp;gt; killed -&amp;gt; &lt;code&gt;docker rm&lt;/code&gt; -&amp;gt; removed&lt;/li&gt;
&lt;li&gt;running -&amp;gt; &lt;code&gt;docker rm --force&lt;/code&gt; -&amp;gt; removed&lt;/li&gt;
&lt;li&gt;running -&amp;gt; &lt;code&gt;docker restart&lt;/code&gt; -&amp;gt; stopped -&amp;gt; running&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Docker container lifecycle schema&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/docker-lifecycle-3.png&quot; alt=&quot;Docker Container Lifecycle&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can see you have many containers, sometimes problems with space in VM. Docker consumes big amount of disk space. I use this script &lt;code&gt;docker-cleanup&lt;/code&gt; for cleanup my VM. First command remove containers and second remove images.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash
# Delete all containers
docker rm $(docker ps -a -q)
# Delete all images
docker rmi $(docker images -q)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/15/day-fifteen-container-lifecycle/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/15/day-fifteen-container-lifecycle/</guid>
        
        
      </item>
    
      <item>
        <title>Day Fourteen - Docker Lifecycle</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
 I can write some details about docker containers. How images and containers born and die.&lt;/p&gt;

&lt;h2&gt;Steps in lifecycle&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You have to &lt;code&gt;build&lt;/code&gt; &lt;strong&gt;image&lt;/strong&gt;. Make &lt;a href=&quot;http://localhost:4000/2015/12/07/day-seven-dockerfile/&quot;&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/a&gt; and run &lt;code&gt;docker build&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;you can run &lt;code&gt;docker build .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or you add tag name &lt;code&gt;docker build -t username/my-imagename .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or you can have &lt;code&gt;Dockerfile&lt;/code&gt; somewhere at path &lt;code&gt;docker build -t username/my-imagename -f /path/Dockerfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you run image by &lt;code&gt;docker run&lt;/code&gt; you create &lt;strong&gt;container&lt;/strong&gt;. You can check them by &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container can be in different status, you can stop them by &lt;code&gt;docker stop&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you make some changes by using terminal &lt;code&gt;docker run -it &amp;lt;image-name&amp;gt; /bin/bash&lt;/code&gt; or &lt;code&gt;docker exec -it &amp;lt;container-id&amp;gt; /bin/bash&lt;/code&gt;. You can change this &lt;strong&gt;container&lt;/strong&gt; into &lt;strong&gt;image&lt;/strong&gt;. You have to use &lt;code&gt;docker commit&lt;/code&gt; &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/commit/&quot;&gt;command&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Docker lifecycle schema&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/docker-lifecycle-2.png&quot; alt=&quot;Docker Container Lifecycle&quot;&gt;&lt;/p&gt;

&lt;p&gt;Next, I write post about details and all commands and statuses docker container.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/14/day-fourteen-docker-lifecycle/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/14/day-fourteen-docker-lifecycle/</guid>
        
        
      </item>
    
      <item>
        <title>Day Thirteen - Docker and TravisCI</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
Docker is great for testing. In last post I write about &lt;a href=&quot;http://www.dockeradvent.com/2015/12/12/day-twelve-docker-and-circleci/&quot;&gt;CircleCI&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Travis CI&lt;/h2&gt;

&lt;p&gt;TravisCI is most used in Open Source projects at GitHub.&lt;/p&gt;

&lt;p&gt;To use Docker add the following settings to your &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo: required

services:
  - docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code&gt;docker-compose&lt;/code&gt; in similar way as in CircleCI.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;env:
  DOCKER_COMPOSE_VERSION: 1.4.2

before_install:
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` &amp;gt; docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m not sure about TravisCI and &lt;a href=&quot;https://docs.travis-ci.com/user/caching&quot;&gt;caching&lt;/a&gt; used for docker. TravisCI using docker for normal build too, if you use &lt;code&gt;sudo: false&lt;/code&gt; your build using docker at backend.&lt;/p&gt;

&lt;h2&gt;Continues Engines&lt;/h2&gt;

&lt;p&gt;Many CI systems exists for example &lt;a href=&quot;https://drone.io/&quot;&gt;drone.io&lt;/a&gt; is build at top of docker. It&amp;#39;s have only simple documentation with basics commands showing UI.&lt;/p&gt;

&lt;p&gt;We have new generation CI as &lt;a href=&quot;http://devcenter.wercker.com/docs/pipelines/per-pipeline-containers.html&quot;&gt;Wercker&lt;/a&gt; or &lt;a href=&quot;https://buildkite.com/docs/guides/docker-containerized-builds&quot;&gt;BuildKite&lt;/a&gt; with pipelines and better support using docker.&lt;/p&gt;

&lt;p&gt;Only future show us who win this battle for best continuous delivery tool.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/13/day-thirteen-docker-and-travisci/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/13/day-thirteen-docker-and-travisci/</guid>
        
        
      </item>
    
      <item>
        <title>Day Twelve - CircleCI and Docker</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
Docker is great for testing. I make a few posts about support in Continues Integration Engines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://circleci.com/docs/docker&quot;&gt;CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/docker/&quot;&gt;TravisCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jenkinsci/docker&quot;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://drone.io/&quot;&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://buildkite.com/docs/guides/docker-containerized-builds&quot;&gt;BuildKite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Circle CI&lt;/h2&gt;

&lt;p&gt;To use Docker add required service into &lt;code&gt;circle.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;machine&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can use this for install different version docker than default (1.8.3):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;machine:
  pre:
    - echo &amp;#39;DOCKER_OPTS=&amp;quot;-s btrfs -e lxc -D --userland-proxy=false&amp;quot;&amp;#39; | sudo tee -a /etc/default/docker
    - sudo curl -L -o /usr/bin/docker &amp;#39;https://s3-external-1.amazonaws.com/circle-downloads/docker-1.9.0-circleci&amp;#39;
    - sudo chmod 0755 /usr/bin/docker
  services:
    - docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you need use own &lt;code&gt;docker-compose&lt;/code&gt; version use this in dependencies:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dependencies:
  cache_directories:
    - &amp;quot;~/bin/docker-compose/&amp;quot;
  override:
    - if [[ ! -e ~/bin/docker-compose ]]; then mkdir ~/bin/docker-compose/; fi
    - if [[ `~/bin/docker-compose/docker-compose -v | cut -d &amp;quot; &amp;quot; -f3` &amp;lt; &amp;quot;1.5.1&amp;quot; ]]; then curl -L https://github.com/docker/compose/releases/download/1.5.1/docker-compose-`uname -s`-`uname -m` &amp;gt; ~/bin/docker-compose/docker-compose &amp;amp;&amp;amp; chmod +x ~/bin/docker-compose/docker-compose; fi
    - ~/bin/docker-compose/docker-compose --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can use caching docker layers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dependencies:
  cache_directories:
    - &amp;quot;~/docker&amp;quot;

  override:
    - if [[ -e ~/docker/image.tar ]]; then docker load -i ~/docker/image.tar; fi
    - docker build -t circleci/elasticsearch .
    - mkdir -p ~/docker; docker save circleci/elasticsearch &amp;gt; ~/docker/image.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you have to test if helps performance. For every hosted CI will helps caching docker hub, but I think this isn&amp;#39;t good solution. Look carefully at &lt;a href=&quot;https://circleci.com/docs/docker#some-known-caching-issues&quot;&gt;caching issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/12/day-twelve-docker-and-circleci/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/12/day-twelve-docker-and-circleci/</guid>
        
        
      </item>
    
      <item>
        <title>Day Eleven - Docker Version Manager</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
Rackspace created &lt;a href=&quot;https://getcarina.com/blog/docker-version-manager/&quot;&gt;docker version manager&lt;/a&gt;, this helps you use more version docker.&lt;/p&gt;

&lt;p&gt;I tested on mac and works good. My college try it at linux and have problems combine with package version. But at linux is easy use normal package system to switch native version.&lt;/p&gt;

&lt;h2&gt;Install on Mac or Linux&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl -sL https://download.getcarina.com/dvm/latest/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;After dvm is installed, list all installed versions of the Docker client:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dvm ls
  1.8.3
-&amp;gt;  system (1.9.1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can install all this versions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dvm ls-remote
1.6.0
1.6.1
1.6.2
1.7.0
1.7.1
1.8.0
1.8.1
1.8.2
1.8.3
1.9.0
1.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;using &lt;code&gt;dvm install &amp;lt;VERSION&amp;gt;&lt;/code&gt;. Switch between version you can use &lt;code&gt;dvm use&lt;/code&gt; command. Project you can see at &lt;a href=&quot;https://github.com/getcarina/dvm&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I love this project. It&amp;#39;s very useful to test new version some as I&amp;#39;m using similar projects for NodeJS (&lt;code&gt;nvm&lt;/code&gt;), Ruby (&lt;code&gt;rbenv&lt;/code&gt;) or Go (&lt;code&gt;gobrew&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/11/day-eleven-docker-version-manager/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/11/day-eleven-docker-version-manager/</guid>
        
        
      </item>
    
      <item>
        <title>Day Ten - Docker Swarm</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
next tool from Docker is &lt;a href=&quot;https://docs.docker.com/swarm/&quot;&gt;Docker Swarm&lt;/a&gt;. It&amp;#39;s native clustering for Docker. You need &lt;a href=&quot;https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/&quot;&gt;service discovery&lt;/a&gt; based on some software as &lt;a href=&quot;https://www.consul.io/&quot;&gt;consul&lt;/a&gt;, &lt;a href=&quot;https://coreos.com/etcd/docs/latest/&quot;&gt;etcd&lt;/a&gt; or &lt;a href=&quot;https://zookeeper.apache.org/&quot;&gt;zookeeper&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Setup swarm&lt;/h2&gt;

&lt;p&gt;You need docker and first you need generate token.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker run swarm create

Unable to find image &amp;#39;swarm:latest&amp;#39; locally
latest: Pulling from library/swarm

d681c900c6e3: Pull complete
188de6f24f3f: Pull complete
90b2ffb8d338: Pull complete
237af4efea94: Pull complete
3b3fc6f62107: Pull complete
7e6c9135b308: Pull complete
986340ab62f0: Pull complete
a9975e2cc0a3: Pull complete
Digest: sha256:c21fd414b0488637b1f05f13a59b032a3f9da5d818d31da1a4ca98a84c0c781b
Status: Downloaded newer image for swarm:latest
ca5c13a8cb0d2a1da427024b032a138a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next step is launch swarm manager:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine create \
&amp;gt;         -d virtualbox \
&amp;gt;         --swarm \
&amp;gt;         --swarm-master \
&amp;gt;         --swarm-discovery token://ca5c13a8cb0d2a1da427024b032a138a \
&amp;gt;         swarm-master

Running pre-create checks...
Creating machine...
(swarm-master) OUT | Creating VirtualBox VM...
(swarm-master) OUT | Creating SSH key...
(swarm-master) OUT | Starting VirtualBox VM...
(swarm-master) OUT | Starting VM...
Waiting for machine to be running, this may take a few minutes...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Detecting the provisioner...
Provisioning created instance...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Configuring swarm...
To see how to connect Docker to this machine, run: docker-machine env swarm-master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can see two machines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine ls

NAME           ACTIVE   DRIVER       STATE     URL                         SWARM
dev            *        virtualbox   Running   tcp://192.168.99.100:2376
swarm-master   -        virtualbox   Running   tcp://192.168.99.101:2376   swarm-master (master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and you need create swarm node:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine create \
&amp;gt;   -d virtualbox \
&amp;gt;   --swarm \
&amp;gt;   --swarm-discovery token://ca5c13a8cb0d2a1da427024b032a138a \
&amp;gt;   swarm-agent-00

Running pre-create checks...
Creating machine...
(swarm-agent-00) OUT | Creating VirtualBox VM...
(swarm-agent-00) OUT | Creating SSH key...
(swarm-agent-00) OUT | Starting VirtualBox VM...
(swarm-agent-00) OUT | Starting VM...
Waiting for machine to be running, this may take a few minutes...
Machine is running, waiting for SSH to be available...
Detecting operating system of created instance...
Detecting the provisioner...
Provisioning created instance...
Copying certs to the local machine directory...
Copying certs to the remote machine...
Setting Docker configuration on the remote daemon...
Configuring swarm...
To see how to connect Docker to this machine, run: docker-machine env swarm-agent-00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and another one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine create -d virtualbox --swarm --swarm-discovery token://ca5c13a8cb0d2a1da427024b032a138a swarm-agent-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and now you can see all machines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine ls

NAME             ACTIVE   DRIVER       STATE     URL                         SWARM
dev              *        virtualbox   Running   tcp://192.168.99.100:2376
swarm-agent-00   -        virtualbox   Running   tcp://192.168.99.102:2376   swarm-master
swarm-agent-01   -        virtualbox   Running   tcp://192.168.99.103:2376   swarm-master
swarm-master     -        virtualbox   Running   tcp://192.168.99.101:2376   swarm-master (master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Running swarm&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;eval $(docker-machine env --swarm swarm-master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and now you can see:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-machine ls

NAME             ACTIVE   DRIVER       STATE     URL                         SWARM
dev              -        virtualbox   Running   tcp://192.168.99.100:2376
swarm-agent-00   -        virtualbox   Running   tcp://192.168.99.102:2376   swarm-master
swarm-agent-01   -        virtualbox   Running   tcp://192.168.99.103:2376   swarm-master
swarm-master     *        virtualbox   Running   tcp://192.168.99.101:2376   swarm-master (master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and you can use docker info about information about your cluster:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker info

Containers: 4
Images: 3
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 3
 swarm-agent-00: 192.168.99.102:2376
  └ Status: Healthy
  └ Containers: 1
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.13-boot2docker, operatingsystem=Boot2Docker 1.9.1 (TCL 6.4.1); master : cef800b - Fri Nov 20 19:33:59 UTC 2015, provider=virtualbox, storagedriver=aufs
 swarm-agent-01: 192.168.99.103:2376
  └ Status: Healthy
  └ Containers: 1
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.13-boot2docker, operatingsystem=Boot2Docker 1.9.1 (TCL 6.4.1); master : cef800b - Fri Nov 20 19:33:59 UTC 2015, provider=virtualbox, storagedriver=aufs
 swarm-master: 192.168.99.101:2376
  └ Status: Healthy
  └ Containers: 2
  └ Reserved CPUs: 0 / 1
  └ Reserved Memory: 0 B / 1.021 GiB
  └ Labels: executiondriver=native-0.2, kernelversion=4.1.13-boot2docker, operatingsystem=Boot2Docker 1.9.1 (TCL 6.4.1); master : cef800b - Fri Nov 20 19:33:59 UTC 2015, provider=virtualbox, storagedriver=aufs
CPUs: 3
Total Memory: 3.064 GiB
Name: f5395c4e7e6e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you can check &lt;code&gt;docker ps  -a&lt;/code&gt; to all containers.&lt;/p&gt;

&lt;p&gt;Try run: &lt;code&gt;docker run hello-world&lt;/code&gt; and after that &lt;code&gt;docker ps -a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker ps -a

CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                                     NAMES
35dd40392b49        hello-world         &amp;quot;/hello&amp;quot;                 16 seconds ago      Exited (0) 15 seconds ago                                             swarm-agent-00/sad_hodgkin
0849ac73f36f        swarm:latest        &amp;quot;/swarm join --advert&amp;quot;   3 minutes ago       Up 3 minutes                2375/tcp                                  swarm-agent-01/swarm-agent
008e6e36c7b3        swarm:latest        &amp;quot;/swarm join --advert&amp;quot;   6 minutes ago       Up 6 minutes                2375/tcp                                  swarm-agent-00/swarm-agent
dfef13a18857        swarm:latest        &amp;quot;/swarm join --advert&amp;quot;   9 minutes ago       Up 9 minutes                2375/tcp                                  swarm-master/swarm-agent
f5395c4e7e6e        swarm:latest        &amp;quot;/swarm manage --tlsv&amp;quot;   9 minutes ago       Up 9 minutes                2375/tcp, 192.168.99.101:3376-&amp;gt;3376/tcp   swarm-master/swarm-agent-master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see our docker container ran on one of our swarm agent.&lt;/p&gt;

&lt;p&gt;Swarm support &lt;a href=&quot;https://docs.docker.com/swarm/discovery/&quot;&gt;multiple discovery backends&lt;/a&gt;. You can experiment with others discovery backends.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/10/day-ten-docker-swarm/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/10/day-ten-docker-swarm/</guid>
        
        
      </item>
    
      <item>
        <title>Day Nine - Docker Registry</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
if you need own docker registry. You can use &lt;a href=&quot;https://github.com/docker/distribution&quot;&gt;official docker registry&lt;/a&gt; image.&lt;/p&gt;

&lt;p&gt;The registry 2.0 implementation provides the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;faster push and pull&lt;/li&gt;
&lt;li&gt;new, more efficient implementation&lt;/li&gt;
&lt;li&gt;simplified deployment&lt;/li&gt;
&lt;li&gt;pluggable storage backend&lt;/li&gt;
&lt;li&gt;webhook notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I love better security included in direct in Registry 2.0. In old version I have Nginx before registry for basic auth. In new version you can use basic auth or OAuth2.&lt;/p&gt;

&lt;p&gt;If you can use basic auth with registry 2.0 create new image with your auth.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;auth&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir auth
docker run --entrypoint htpasswd registry:2 -Bbn testuser testpassword &amp;gt; auth/htpasswd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and create image with this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; registry:latest
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; mkdir /auth
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; auth/htpasswd /auth/htpasswd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and I have &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker.apiary-internal.com/registry&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cpu_shares&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;400&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;mem_limit&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;314572800&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;5000:5000&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_BUCKET&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;docker-registry-bucket&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_ENCRYPT&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_KEY&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;AWS-KEY&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_REGION&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;AWS-REGION&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_SECRET&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;&amp;lt;AWS-SECRET&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_SECURE&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;AWS_USE_SIGV4&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SETTINGS_FLAVOR&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;prod&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;SEARCH_BACKEND&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;sqlalchemy&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;REGISTRY_AUTH&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;htpasswd&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;REGISTRY_AUTH_HTPASSWD_REALM&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Docker&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Internal&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Registry&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;REGISTRY_AUTH_HTPASSWD_PATH&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/auth/htpasswd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use for example &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;AWS Elastic Container Service (ECS)&lt;/a&gt;. You can create task definition with &lt;a href=&quot;http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html&quot;&gt;&lt;code&gt;ecs-cli&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;AWS_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;AWS-REGION&amp;gt; ecs-cli compose create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For login into internal registry you have to use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker login docker-registry.company.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In AWS use &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancer (ELB)&lt;/a&gt; to use &lt;code&gt;https&lt;/code&gt; and forward port &lt;code&gt;443&lt;/code&gt; into &lt;code&gt;5000&lt;/code&gt; at ECS.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/09/day-nine-docker-registry/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/09/day-nine-docker-registry/</guid>
        
        
      </item>
    
      <item>
        <title>Day Eight - Docker Compose Part 2</title>
        <description>&lt;p&gt;Hello everyone,&lt;br&gt;
I&amp;#39;m back with Docker Compose. In &lt;a href=&quot;http://www.dockeradvent.com/2015/12/05/day-five-docker-compose-part-1/&quot;&gt;previous post&lt;/a&gt; we have some basics. Today, I can show how you can combine &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;docker-compose.yml&lt;/code&gt; file. This is useful for development. Can&amp;#39;t be used in production.&lt;/p&gt;

&lt;p&gt;My example is simple Ruby application. I can use Redis for caching and queues.
I can use image with Redis from Docker Hub. I use hosted Redis in production and this is only for development. But app is specific. I can use Sinatra framework and use last Ruby.
 We can look at Docker Hub if exists &lt;a href=&quot;https://hub.docker.com/_/ruby/&quot;&gt;official image for Ruby&lt;/a&gt;. Yes, here is. I choose using them and create &lt;code&gt;Dockerfile&lt;/code&gt; to extend this image for my application. This is my &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Ruby dockerfile is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; ruby:2.2

&lt;span class=&quot;c&quot;&gt;# throw errors if Gemfile has been modified since Gemfile.lock&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; bundle config --global frozen &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; mkdir -p /usr/src/app
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt; /usr/src/app

ONBUILD COPY Gemfile /usr/src/app/
ONBUILD COPY Gemfile.lock /usr/src/app/
&lt;span class=&quot;n-Keyword&quot;&gt;ONBUILD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; bundle install

ONBUILD COPY . /usr/src/app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;my &lt;code&gt;Dockerfile&lt;/code&gt; is easy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;FROM ruby:2.2-onbuild

EXPOSE 4567

WORKDIR /usr/src/app


ENTRYPOINT [&amp;quot;/usr/local/bin/ruby&amp;quot;]
CMD [&amp;quot;server.rb&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I have to test if build works:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker built -t abtris/sinatra .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and integrate with &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cache&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;4567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and you run this with &lt;code&gt;docker-compose up&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker-compose up
Creating sinatra_cache_1
Creating sinatra_web_1
Attaching to sinatra_cache_1, sinatra_web_1
cache_1 | 1:C 08 Dec 13:22:32.153 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
cache_1 |                 _._
cache_1 |            _.-``__ &amp;#39;&amp;#39;-._
cache_1 |       _.-``    `.  `_.  &amp;#39;&amp;#39;-._           Redis 3.0.5 (00000000/0) 64 bit
cache_1 |   .-`` .-```.  ```\/    _.,_ &amp;#39;&amp;#39;-._
cache_1 |  (    &amp;#39;      ,       .-`  | `,    )     Running in standalone mode
cache_1 |  |`-._`-...-` __...-.``-._|&amp;#39;` _.-&amp;#39;|     Port: 6379
cache_1 |  |    `-._   `._    /     _.-&amp;#39;    |     PID: 1
cache_1 |   `-._    `-._  `-./  _.-&amp;#39;    _.-&amp;#39;
cache_1 |  |`-._`-._    `-.__.-&amp;#39;    _.-&amp;#39;_.-&amp;#39;|
cache_1 |  |    `-._`-._        _.-&amp;#39;_.-&amp;#39;    |           http://redis.io
cache_1 |   `-._    `-._`-.__.-&amp;#39;_.-&amp;#39;    _.-&amp;#39;
cache_1 |  |`-._`-._    `-.__.-&amp;#39;    _.-&amp;#39;_.-&amp;#39;|
cache_1 |  |    `-._`-._        _.-&amp;#39;_.-&amp;#39;    |
cache_1 |   `-._    `-._`-.__.-&amp;#39;_.-&amp;#39;    _.-&amp;#39;
cache_1 |       `-._    `-.__.-&amp;#39;    _.-&amp;#39;
cache_1 |           `-._        _.-&amp;#39;
cache_1 |               `-.__.-&amp;#39;
cache_1 |
cache_1 | 1:M 08 Dec 13:22:32.154 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
cache_1 | 1:M 08 Dec 13:22:32.154 # Server started, Redis version 3.0.5
cache_1 | 1:M 08 Dec 13:22:32.154 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &amp;#39;vm.overcommit_memory = 1&amp;#39; to /etc/sysctl.conf and then reboot or run the command &amp;#39;sysctl vm.overcommit_memory=1&amp;#39; for this to take effect.
cache_1 | 1:M 08 Dec 13:22:32.154 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &amp;#39;echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled&amp;#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
cache_1 | 1:M 08 Dec 13:22:32.154 * The server is now ready to accept connections on port 6379
web_1   | [2015-12-08 13:22:32] INFO  WEBrick 1.3.1
web_1   | [2015-12-08 13:22:32] INFO  ruby 2.2.3 (2015-08-18) [x86_64-linux]
web_1   | == Sinatra (v1.4.6) has taken the stage on 4567 for development with backup from WEBrick
web_1   | [2015-12-08 13:22:32] INFO  WEBrick::HTTPServer#start: pid=1 port=4567
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Application works &lt;code&gt;open http://$(docker-machine ip dev)&lt;/code&gt; launch browser and you can see your application.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/08/day-eight-docker-compose-part-2/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/08/day-eight-docker-compose-part-2/</guid>
        
        
      </item>
    
      <item>
        <title>Day Seven - Dockerfile</title>
        <description>&lt;p&gt;Hi everyone,&lt;br&gt;
if you can start making own images you need &lt;code&gt;Dockerfile&lt;/code&gt;. This file describe how is image created. Every command is cachable in separate layer and this is helpful if adding new commands, rebuild is more faster than you use tools as Puppet, Chef or Ansible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.docker.com/engine/reference/builder/&quot;&gt;Dockerfile&lt;/a&gt; can contains many commands.&lt;/p&gt;

&lt;h2&gt;Structure&lt;/h2&gt;

&lt;p&gt;Minimum file is for example used in Heroku:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; heroku/nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this is only one line! This image has parent image with &lt;code&gt;Dockerfile&lt;/code&gt; contains:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Inherit from Heroku&amp;#39;s stack&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; heroku/cedar:14

&lt;span class=&quot;c&quot;&gt;# Internally, we arbitrarily use port 3000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; PORT &lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Which version of node?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; NODE_ENGINE 0.12.2
&lt;span class=&quot;c&quot;&gt;# Locate our binaries&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt; PATH /app/heroku/node/bin/:/app/user/node_modules/.bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create some needed directories&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; mkdir -p /app/heroku/node /app/.profile.d
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt; /app/user

&lt;span class=&quot;c&quot;&gt;# Install node&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; curl -s https://s3pository.heroku.com/node/v&lt;span class=&quot;nv&quot;&gt;$NODE_ENGINE&lt;/span&gt;/node-v&lt;span class=&quot;nv&quot;&gt;$NODE_ENGINE&lt;/span&gt;-linux-x64.tar.gz &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar --strip-components&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; -xz -C /app/heroku/node

&lt;span class=&quot;c&quot;&gt;# Export the node path in .profile.d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=\&amp;quot;/app/heroku/node/bin:/app/user/node_modules/.bin:\$PATH\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; /app/.profile.d/nodejs.sh

&lt;span class=&quot;n-Keyword&quot;&gt;ONBUILD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; package.json /app/user/
&lt;span class=&quot;n-Keyword&quot;&gt;ONBUILD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; /app/heroku/node/bin/npm install
&lt;span class=&quot;n-Keyword&quot;&gt;ONBUILD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; . /app/user/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This parent is &lt;code&gt;heroku/cedar:14&lt;/code&gt; and his &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; ubuntu-debootstrap:14.04
COPY ./cedar-14.sh /tmp/build.sh
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C &lt;span class=&quot;nv&quot;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;noninteractive /tmp/build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and this parent &lt;code&gt;ubuntu-debootstrap:14.04&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; scratch
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; rootfs.tar.xz /
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;scratch&lt;/code&gt; is &lt;a href=&quot;https://hub.docker.com/r/library/scratch/&quot;&gt;empty image&lt;/a&gt; that is used explicitly to build new images.&lt;/p&gt;

&lt;h2&gt;Commands&lt;/h2&gt;

&lt;p&gt;You start with &lt;code&gt;FROM&lt;/code&gt;. Usually use smallest possible image or image used in your servers.&lt;/p&gt;

&lt;p&gt;For adding files into image use &lt;code&gt;ADD&lt;/code&gt; or &lt;code&gt;COPY&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;If you&amp;#39;re not interested in the nuances of ADD and COPY and just want an answer to &amp;quot;which one should I use?&amp;quot;, all you need to know is: use COPY. - [Brian DeHamer](https://labs.ctl.io/dockerfile-add-vs-copy/)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In simple way &lt;code&gt;ADD&lt;/code&gt; use only for URL address or archives.&lt;/p&gt;

&lt;p&gt;Next is &lt;code&gt;RUN&lt;/code&gt; command, you can run any OS command. Every &lt;code&gt;RUN&lt;/code&gt; is in separate layer and it&amp;#39;s useful if you group commands.&lt;/p&gt;

&lt;p&gt;Instead using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get install -y package-bar
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get install -y package-baz
&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get install -y package-foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;use this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;RUN&lt;/span&gt; apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        package-bar &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        package-baz &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
        package-foo &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get clean &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First example create 4 images for every layer. Second create only one and clean after install. This helps with image size.&lt;/p&gt;

&lt;p&gt;If you need ports use &lt;code&gt;EXPOSE&lt;/code&gt;, for environment properties &lt;code&gt;ENV&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; is main image command and &lt;code&gt;CMD&lt;/code&gt; is for default flags.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the image can be run like this to show the command’s help:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker run node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or using the right parameters to execute a command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ docker run node install aws-sdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can define &lt;code&gt;VOLUME&lt;/code&gt;, &lt;code&gt;USER&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt; if you need it.&lt;/p&gt;

&lt;p&gt;Last interesting command is &lt;code&gt;ONBUILD&lt;/code&gt;. I like this, you can defined some parts in parent image. This commands will be executed in building only for child image. Example we have in our image where is &lt;code&gt;FROM heroku/nodejs&lt;/code&gt; image. This image in build execute sequence defined in &lt;code&gt;heroku\nodejs&lt;/code&gt; image.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ONBUILD ADD package.json /app/user/
ONBUILD RUN /app/heroku/node/bin/npm install
ONBUILD ADD . /app/user/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in our image is added &lt;code&gt;package.json&lt;/code&gt; and install all dependencies. After that add your source code.&lt;/p&gt;

&lt;p&gt;This is very good example how use &lt;code&gt;ONBUILD&lt;/code&gt; as template for your apps. Another examples are many images for &lt;a href=&quot;https://hub.docker.com/_/golang/&quot;&gt;golang&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/perl/&quot;&gt;perl&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/rails/&quot;&gt;rails&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/node/&quot;&gt;nodejs&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/php/&quot;&gt;php&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/wordpress/&quot;&gt;wordpress&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/_/java/&quot;&gt;java&lt;/a&gt; as based images.&lt;/p&gt;

&lt;p&gt;See you tomorrow,&lt;br&gt;
Ladislav&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2015 11:00:00 +0100</pubDate>
        <link>http://www.dockeradvent.com//2015/12/07/day-seven-dockerfile/</link>
        <guid isPermaLink="true">http://www.dockeradvent.com//2015/12/07/day-seven-dockerfile/</guid>
        
        
      </item>
    
  </channel>
</rss>
